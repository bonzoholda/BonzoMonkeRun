<!DOCTYPE html>
<html>
<head>
    <title>BonzoMonke Run</title>
    <style>
        canvas { border: 1px solid black; }
        body { margin: 0; background: #000; display: flex; justify-content: center; align-items: center; }
    </style>
</head>
<body>
    <canvas id="gameCanvas" width="800" height="600"></canvas>
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        // Load images
        const bonzoImg = new Image();
        bonzoImg.src = 'bonzo_monke.png';
        const btcImg = new Image();
        btcImg.src = 'btc_logo.png';

        // Load sounds
        const coinSound = new Audio('coin.mp3');
        const btcSound = new Audio('btc.mp3');
        const warningSound = new Audio('warning.mp3');
        const bgm = new Audio('bgm.mp3');
        bgm.loop = true; // Loop background music
        bgm.volume = 0.3; // Lower volume to avoid overpowering effects
        let isWarningPlaying = false;

        // Game variables
        const CELL_SIZE = 60;
        let player = { x: CELL_SIZE, y: CELL_SIZE };
        let btc = { x: CELL_SIZE * 11, y: CELL_SIZE * 8 };
        let coins = [{ x: CELL_SIZE * 3, y: CELL_SIZE * 2 }, { x: CELL_SIZE * 5, y: CELL_SIZE * 4 }];
        let score = 0;
        let timer = 60;

        // Simple maze (1 = wall, 0 = path)
        const maze = [
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1],
            [1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1],
            [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
            [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1],
            [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1],
            [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
            [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1],
            [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        ];

        function isWall(x, y) {
            const gridX = Math.floor(x / CELL_SIZE);
            const gridY = Math.floor(y / CELL_SIZE);
            return maze[gridY][gridX] === 1;
        }

        // Movement
        document.addEventListener('keydown', (e) => {
            let newX = player.x;
            let newY = player.y;
            if (e.key === 'ArrowUp') newY -= CELL_SIZE;
            if (e.key === 'ArrowDown') newY += CELL_SIZE;
            if (e.key === 'ArrowLeft') newX -= CELL_SIZE;
            if (e.key === 'ArrowRight') newX += CELL_SIZE;
            if (!isWall(newX, newY)) {
                player.x = newX;
                player.y = newY;
            }
        });

        // Game loop
        function gameLoop() {
            // Update
            timer -= 1 / 60;
            if (timer <= 0) {
                bgm.pause();
                return; // Game over
            }

            if (player.x === btc.x && player.y === btc.y) {
                score += 500;
                btcSound.play();
                btc.x = Math.floor(Math.random() * 11 + 1) * CELL_SIZE;
                btc.y = Math.floor(Math.random() * 9 + 1) * CELL_SIZE;
                while (isWall(btc.x, btc.y)) {
                    btc.x = Math.floor(Math.random() * 11 + 1) * CELL_SIZE;
                    btc.y = Math.floor(Math.random() * 9 + 1) * CELL_SIZE;
                }
            }

            coins = coins.filter(coin => {
                if (player.x === coin.x && player.y === coin.y) {
                    score += 10;
                    timer += 5;
                    coinSound.play();
                    return false;
                }
                return true;
            });

            // Timer warning sound
            if (timer <= 10 && !isWarningPlaying) {
                warningSound.play();
                isWarningPlaying = true;
            } else if (timer > 10 && isWarningPlaying) {
                warningSound.pause();
                warningSound.currentTime = 0;
                isWarningPlaying = false;
            }

            // Draw
            ctx.fillStyle = '#000';
            ctx.fillRect(0, 0, 800, 600);

            // Draw maze
            for (let y = 0; y < maze.length; y++) {
                for (let x = 0; x < maze[0].length; x++) {
                    if (maze[y][x] === 1) {
                        ctx.fillStyle = '#666';
                        ctx.fillRect(x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE);
                    }
                }
            }

            // Draw coins
            ctx.fillStyle = '#ff0';
            coins.forEach(coin => {
                ctx.beginPath();
                ctx.arc(coin.x + CELL_SIZE / 2, coin.y + CELL_SIZE / 2, 15, 0, Math.PI * 2);
                ctx.fill();
            });

            // Draw BTC and player
            ctx.drawImage(btcImg, btc.x, btc.y, CELL_SIZE, CELL_SIZE);
            ctx.drawImage(bonzoImg, player.x, player.y, CELL_SIZE, CELL_SIZE);

            // Draw HUD
            ctx.fillStyle = '#fff';
            ctx.font = '20px Arial';
            ctx.fillText(`Time: ${Math.floor(timer)}`, 10, 30);
            ctx.fillText(`Score: ${score}`, 10, 60);

            requestAnimationFrame(gameLoop);
        }

        // Start background music and game when images load
        bonzoImg.onload = btcImg.onload = () => {
            bgm.play();
            gameLoop();
        };
    </script>
</body>
</html>
